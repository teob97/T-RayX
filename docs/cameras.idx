Ray	cameras.html#Ray	cameras: Ray	
newRay	cameras.html#newRay,Point,Vec,float,int	cameras: newRay(origin: Point; dir: Vec; tmin = 0.00001; tmax = Inf; depth = 0): Ray	
areClose	cameras.html#areClose,Ray,Ray	cameras: areClose(ray1, ray2: Ray): bool	
at	cameras.html#at,Ray,float	cameras: at(ray: Ray; t: float): Point	
`*`	cameras.html#*,Ray,Transformation	cameras: `*`(ray: Ray; transformation: Transformation): Ray	
Camera	cameras.html#Camera	cameras: Camera	
OrthogonalCamera	cameras.html#OrthogonalCamera	cameras: OrthogonalCamera	
PerspectiveCamera	cameras.html#PerspectiveCamera	cameras: PerspectiveCamera	
newOrthogonalCamera	cameras.html#newOrthogonalCamera,float	cameras: newOrthogonalCamera(aspect_ratio: float; transformation = newTransformation()): OrthogonalCamera	
fireRay	cameras.html#fireRay.e,Camera,float,float	cameras: fireRay(cam: Camera; u, v: float): Ray	
fireRay	cameras.html#fireRay.e,OrthogonalCamera,float,float	cameras: fireRay(cam: OrthogonalCamera; u, v: float): Ray	
ImageTracer	cameras.html#ImageTracer	cameras: ImageTracer	
newImageTracer	cameras.html#newImageTracer,HdrImage,OrthogonalCamera	cameras: newImageTracer(image: HdrImage; camera: OrthogonalCamera): ImageTracer	
fireRay	cameras.html#fireRay,ImageTracer,int,int,float,float	cameras: fireRay(imageT: ImageTracer; col: int; row: int; u_pixel = 0.5; v_pixel = 0.5): Ray	
fireAllRay	cameras.html#fireAllRay,ImageTracer,proc	cameras: fireAllRay(imageT: var ImageTracer; function: proc)	
